# Running VitaPulseDX Project in VS Code(Backend Operation) :

Follow the steps below to run  the Backend (Flask server) for the VitaPulseDX application.

## Step 1: Open Two Terminals in VS Code

You need to open two separate terminals in VS Code:

1. Backend Terminal* – for running the Flask server.
2. Frontend Terminal – for serving the static files (HTML, CSS, JS).

## **Step 2: Run the Backend (Flask Server)**

1. In the **Backend Terminal**, navigate to the project folder where `app.py` is located.

2. Run the following command to start the Flask server:

   ```bash
   python app.py
   ```

   Once the server is running, you should see the following status messages in the terminal:

   ```
   (INFO:werkzeug:Press CTRL+C to quit
   INFO:werkzeug: * Restarting with stat
   INFO:root:Loading the model...
   INFO:root:Model loaded successfully
   INFO:root:Starting the Flask app...
   WARNING:werkzeug: * Debugger is active!
   INFO:werkzeug: * Debugger PIN: 974-645-120
   INFO:werkzeug:127.0.0.1 - - [16/Jul/2024 01:00:11] "OPTIONS /predict HTTP/1.1" 200 -
   INFO:root:Received prediction request
   DEBUG:root:Request data: {'age': 52, 'glucose': 148, 'bloodPressure': 72, 'insulin': 0, 'bmi': 48, 'diabetesPedigree': 229.3}
   e:\Data Science Projects\VitaPulseDX\Backend\venv\Lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
   warnings.warn(
   INFO:root:Prediction successful
   INFO:werkzeug:127.0.0.1 - - [16/Jul/2024 01:00:11] "POST /predict HTTP/1.1" 200 -
   ```

   This confirms that the Flask app is running and ready to handle requests.


## Step 3: Run the Frontend (Static Server)

1. In the **Frontend Terminal**, navigate to the folder containing your static files (e.g., `diabets.html`, `style.css`, `script.js`).

2. Start a simple HTTP server by running the following command:

   ```bash
   python -m http.server 8001
   ```

   Once the server is up and running, you'll see output similar to:

   ```
   Serving HTTP on :: port 8001 (http://[::]:8001/) ...
   ::1 - - [16/Jul/2024 00:58:14] "GET /diabets.html HTTP/1.1" 200 -
   ::1 - - [16/Jul/2024 00:58:14] "GET /style.css HTTP/1.1" 200 -
   ::1 - - [16/Jul/2024 00:58:14] "GET /Opretions.js HTTP/1.1" 200 -
   ::1 - - [16/Jul/2024 00:58:15] "GET /img/img-10.jpg HTTP/1.1" 200 -
   ::1 - - [16/Jul/2024 00:58:15] code 404, message File not found
   ::1 - - [16/Jul/2024 00:58:15] "GET /favicon.ico HTTP/1.1" 404 -
   ::1 - - [16/Jul/2024 00:58:20] "GET /img/im-9.jpg HTTP/1.1" 200 -
   ::1 - - [16/Jul/2024 00:58:25] "GET /img/img-7.jpg HTTP/1.1" 200 -
   ::1 - - [16/Jul/2024 00:59:08] "GET /diabets.html HTTP/1.1" 304 -
   ::1 - - [16/Jul/2024 00:59:18] "GET /img/img-7.jpg HTTP/1.1" 200 -
   ```

   This confirms that the frontend is being served at `http://localhost:8001`.


## Step 4: Open the Application in Your Browser

1. Open **Google Chrome** or your preferred web browser.

2. Type the following address in the address bar:

   ```
   http://localhost:8001/diabets.html
   ```

3. Press **Enter** to load the web application.

---

## Step 5: Check the Network Tab in Developer Tools

To ensure that all files are loading correctly:

1. Open Developer Tools** in your browser by pressing F12.

2. Go to the **Network** tab.

3. Reload the page and check if all resources (images, CSS, JS files, etc.) are being loaded correctly. You should see status codes like `200 OK` for successful requests, or `404` for files not found.



### Summary: 

1. Backend: Run `python app.py` in the Backend Terminal to start the Flask server.
2. Frontend: Run `python -m http.server 8001` in the Frontend Terminal to serve static files.
3. Open http://localhost:8001/diabets.html in your browser to use the application.
4. Use F12 in your browser to check the Network tab for successful file loading.


